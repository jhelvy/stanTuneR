ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(color='red')
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(color='green')
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(color='blue')
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(color='#H20F0s')
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(color='#H20F09')
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(color='blue')
head(mpg)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class))
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(shape=class))
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class))
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class), size=0.5)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class), size=1)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class), size=5)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point()
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point() +
geom_line()
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point()
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point() +
geom_line()
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point() +
geom_smooth(se = FALSE)
mpg
ggplot(mpg, aes(x=class)) +
geom_bar()
ggplot(mpg, aes(x=class)) +
geom_bar(fill='blue')
ggplot(mpg, aes(x=class)) +
geom_bar(fill='blue', color='red')
ggplot(mpg, aes(x=class)) +
geom_bar(fill='blue', color='red', size=4)
ggplot(mpg, aes(x=class)) +
geom_bar(color='red')
ggplot(mpg, aes(x=class)) +
geom_bar(fill='red')
ggplot(mpg, aes(x=class)) +
geom_bar(aes(fill=drv))
ggplot(mpg, aes(x=class)) +
geom_bar(fill=drv)
ggplot(mpg, aes(x=class)) +
geom_bar(aes(fill=drv))
ggplot(mpg, aes(x=class)) +
geom_bar(aes(fill=drv), position='stack')
ggplot(mpg, aes(x=class)) +
geom_bar(aes(fill=drv), position='dodge')
ggplot(mpg, aes(x=class)) +
geom_bar(aes(fill=drv))
ggplot(mpg, aes(x=class)) +
geom_bar()
plotData = mpg %>% arrange(hwy)
ggplot(plotData, aes(x=class)) +
geom_bar()
ggplot(plotData, aes(x=class)) +
geom_bar() +
scale_x_discrete(limits=c('2seater', 'minivan', 'pickup', 'subcompact',
'midsize', 'compact', 'suv'))
ggplot(plotData, aes(x=class)) +
geom_bar() +
scale_x_discrete(limits=c('2seater', 'pickup', 'minivan', 'subcompact',
'midsize', 'compact', 'suv'))
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_smooth(color=drv)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_smooth(aes(color=drv))
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(color='blue', se=F)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=F)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=F, fill='blue')
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=F, fill='red')
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=F, color='red')
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=F, color='blue')
ggplot(mpg, aes(x=drv)) +
geom_bar()
ggplot(mpg, aes(x=drv)) +
geom_bar(aes(fill=class))
?ggsave
ggplot(mpg, aes(x=drv)) +
geom_bar(aes(fill=class))
ggplot(mpg, aes(x=drv)) +
geom_bar(aes(fill=class))
ggplot(mpg, aes(x=hwy)) +
geom_histogram()
ggplot(mpg, aes(x=hwy)) +
geom_histogram(bins=10)
ggplot(mpg, aes(x=hwy)) +
geom_histogram(bins=100)
ggplot(mpg, aes(x=hwy)) +
geom_histogram()
ggplot(mpg, aes(x=hwy)) +
geom_histogram(aes(fill=drv))
ggplot(mpg, aes(x=hwy)) +
geom_density()
ggplot(mpg, aes(x=hwy)) +
geom_density(fill='blue')
ggplot(mpg, aes(x=hwy)) +
geom_density(fill='blue', alpha=0.5)
ggplot(mpg, aes(x=hwy)) +
geom_density(fill='blue', alpha=0.1)
ggplot(mpg, aes(x=hwy)) +
geom_density(fill='blue', alpha=0.4)
ggplot(mpg, aes(x=hwy)) +
geom_density(fill='blue', alpha=0.4, color=NA)
ggplot(mpg, aes(x=hwy)) +
geom_density(aes(fill=drv), alpha=0.4, color=NA)
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot()
ggplot(mpg, aes( y=hwy)) +
geom_boxplot()
ggplot(mpg, aes(y=hwy)) +
geom_boxplot()
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot()
?geom_boxplot
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(notch=T)
?geom_boxplot
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot()
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(outlier.shape=NA)
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(outlier.shape=NA, width=0.3)
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(outlier.shape=NA, width=0.3)+
geom_jitter()
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(outlier.shape=NA, width=0.3)+
geom_jitter(alpha=0.3)
ggplot(mpg, aes(x=hwy)) +
geom_histogram(aes(fill=drv), alpha=0.4)
ggplot(mpg, aes(x=drv, y=displ)) +
geom_boxplot() +
geom_jitter(alpha=0.4)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class))
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point() +
facet_wrap(~class)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point() +
facet_grid(drv~cyl)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_smooth() +
facet_wrap(~class)
ggplot(mpg, aes(x=hwy)) +
geom_histogram()
ggplot(mpg, aes(x=hwy)) +
geom_histogram() +
facet_wrap(~drv)
head(mpg)
str(mpg)
ggplot(mpg, aes(x=hwy)) +
geom_histogram() +
facet_wrap(~manufacturer)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point()
plot = ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point()
plot
plot
plot + theme_classic()
plot + theme_bw()
plot + theme_minimal()
library(ggthemes)
plot + theme_economist()
plot + theme_tufte()
plot + theme_bw()
plot
plot + theme_bw()
plot + theme_minimal()
plot = ggplot(mpg, aes(x=class)) +
geom_bar()
plot
plot + coord_flip()
plot = ggplot(mpg, aes(x=class)) +
geom_bar(aes(color=class))
plot
plot = ggplot(mpg, aes(x=class)) +
geom_bar(aes(fill=class))
plot
plot + labs(x='Vehicle Class')
plot + labs(x='Vehicle Class', y='Count', fill='Vehicle Class')
plot + labs(x='Vehicle Class', y='Count', fill='Vehicle Class', main='Plot title')
plot + labs(x='Vehicle Class', y='Count', fill='Vehicle Class', title='Plot title')
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot()
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(aes(color=year))
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(aes(color=as.factor(year)))
str(mpg)
unique(pg$year)
unique(mpg$year)
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(aes(color=as.factor(year)))
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(aes(color=as.factor(year))) +
theme_bw()
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(aes(color=as.factor(year))) +
theme_bw() +
labs(x='Class', y='Fuel Economy', color='Year')
plotDf = mpg %>% mutate(year = as.character(year))
str(plotDf)
ggplot(plotDf, aes(x=class, y=hwy)) +
geom_boxplot(aes(color=year)) +
theme_bw() +
labs(x='Class', y='Fuel Economy', color='Year')
mpg %>%
mutate(year = as.character(year)) %>%
ggplot(aes(x=class, y=hwy)) +
geom_boxplot(aes(color=year)) +
theme_bw() +
labs(x='Class', y='Fuel Economy', color='Year')
plot = mpg %>%
mutate(year = as.character(year)) %>%
ggplot(aes(x=class, y=hwy)) +
geom_boxplot(aes(color=year)) +
theme_bw() +
labs(x='Class', y='Fuel Economy', color='Year')
plot
mpg
mpg %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy))
mpg %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
ggplot(aes(x=manufacturer, y=meanHwy)) +
geom_bar()
mpg %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
ggplot(aes(x=manufacturer, y=meanHwy)) +
geom_bar(stat='identi')
mpg %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
ggplot(aes(x=manufacturer, y=meanHwy)) +
geom_bar(stat='identity')
mpg %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
ggplot(aes(x=manufacturer, y=meanHwy)) +
geom_bar(stat='identity') +
coord_flip()
mpg %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
ggplot(aes(x=reorder(manufacturer, meanHwy), y=meanHwy)) +
geom_bar(stat='identity') +
coord_flip()
mpg %>%
mutate(manufacturer = str_to_title(manufacturer)) %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
ggplot(aes(x=reorder(manufacturer, meanHwy), y=meanHwy)) +
geom_bar(stat='identity') +
coord_flip()
mpg %>%
mutate(manufacturer = str_to_title(manufacturer)) %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy))
mpg %>%
mutate(manufacturer = str_to_upper(manufacturer)) %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
ggplot(aes(x=reorder(manufacturer, meanHwy), y=meanHwy)) +
geom_bar(stat='identity') +
coord_flip()
mpg %>%
mutate(manufacturer = str_to_title(manufacturer)) %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
ggplot(aes(x=reorder(manufacturer, meanHwy), y=meanHwy)) +
geom_bar(stat='identity') +
coord_flip()
mpg %>%
mutate(manufacturer = str_to_title(manufacturer)) %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
arrange(meanHwy) %>%
ggplot(aes(x=manufacturer, y=meanHwy)) +
geom_bar(stat='identity') +
coord_flip()
mpg %>%
mutate(manufacturer = str_to_title(manufacturer)) %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
arrange(meanHwy)
mpg %>%
mutate(manufacturer = str_to_title(manufacturer)) %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
ggplot(aes(x=reorder(manufacturer, meanHwy), y=meanHwy)) +
geom_bar(stat='identity') +
coord_flip()
plotDf = mpg %>%
mutate(manufacturer = str_to_title(manufacturer)) %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
arrange(meanHwy)
plotDf
carNames = plotDf$manufacturer
carNames
ggplot(plotDf, aes(x=manufacturer, y=meanHwy)) +
geom_bar(stat='identity') +
coord_flip()
ggplot(plotDf, aes(x=manufacturer, y=meanHwy)) +
geom_bar(stat='identity') +
coord_flip() +
scale_x_discrete(limits=carNames)
carNames = plotDf$manufacturer
carNames
ggplot(plotDf, aes(x=manufacturer, y=meanHwy)) +
geom_bar(stat='identity') +
coord_flip() +
scale_x_discrete(limits=carNames)
# Create the new data frae for plotting
plotDf = mpg %>%
mutate(manufacturer = str_to_title(manufacturer)) %>%
group_by(manufacturer) %>%
summarise(meanHwy = mean(hwy)) %>%
arrange(meanHwy)
# I'm going to use this later to reorder the x-axis
carNames = plotDf$manufacturer
ggplot(plotDf, aes(x=manufacturer, y=meanHwy)) +
geom_bar(stat='identity') +
coord_flip() +
# This is where I reorder things
scale_x_discrete(limits=carNames)
?shortcuts
remove.packages("rstan")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
remove.packages("rstan")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
library("rstan")
options(mc.cores = parallel::detectCores())
parallel::detectCores()
rstan_options(auto_write = TRUE)
install.packages(c("devtools","mvtnorm","loo","coda"),dependencies=TRUE)
install_github("rmcelreath/rethinking",ref="Experimental")
library(devtools)
install_github("rmcelreath/rethinking",ref="Experimental")
install.packages('mvtnorm')
asdflkj
stan_rdump(c("N", "y"), file="simulation.data.R")
y <- extract(simu)$y[1,]
fit <- stan(file='fit_data.stan', data=input_data, seed=4938483)
# Much better
params = extract(fit)
# Check diagnostics
util$check_all_diagnostics(fit)
install.packages('rstan')
install.packages(tidyverse)
install.packages('tidyverse')
install.packages('MASS')
install.packages('devtools')
install.packages('devtools')
library('devtools')
install_github('jhelvy/jhelvyr')
library('jhelvyr')
install.packages('rstan')
setwd('/Users/jhelvy/Documents/GitHub/stanTuner')
# ----------------------------------------------------------------------------
# Initial setup
# Load libraries
library(shiny)
library(rstan)
# Stan settings
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# Load the functions
funcs <- new.env()
source('functions.R', local=funcs)
targets = list(
bound_L = 1,    # LOWER quantile boundary
bound_U = 10,   # UPPER quantile boundary
dens_L  = 0.01, # Target density below LOWER quantile boundary
dens_U  = 0.01) # Target density above UPPER quantile boundary
results = funcs$tuneParams(distribution='gamma', targets)
results$params
results$quantiles
results$histogram
exp(5)
exp(1)
exp(1)
log(1)
log(5)
lgo(5)
log(5)
# ----------------------------------------------------------------------------
# Initial setup
# Load libraries
library(shiny)
library(rstan)
# Stan settings
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# Load the functions
funcs <- new.env()
source('functions.R', local=funcs)
targets = list(
bound_L = 1,    # LOWER quantile boundary
bound_U = 10,   # UPPER quantile boundary
dens_L  = 0.01, # Target density below LOWER quantile boundary
dens_U  = 0.01) # Target density above UPPER quantile boundary
results = funcs$tuneParams(distribution='gamma', targets)
# ----------------------------------------------------------------------------
# Initial setup
# Load libraries
library(shiny)
library(rstan)
# Stan settings
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# Load the functions
funcs <- new.env()
source('functions.R', local=funcs)
targets
results = funcs$tuneParams(distribution='gamma', targets)
# ----------------------------------------------------------------------------
# Initial setup
# Load libraries
library(shiny)
library(rstan)
# Stan settings
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# Load the functions
funcs <- new.env()
source('functions.R', local=funcs)
targets = list(
bound_L = 1,    # LOWER quantile boundary
bound_U = 10,   # UPPER quantile boundary
dens_L  = 0.01, # Target density below LOWER quantile boundary
dens_U  = 0.01) # Target density above UPPER quantile boundary
results = funcs
results = funcs$tuneParams(distribution='inv_gamma', targets)
results$params
results$quantiles
results$histogram
funcs <- new.env()
source('functions.R', local=funcs)
results = funcs$tuneParams(distribution='gamma', targets)
results$params
results$quantiles
results$histogram
# ----------------------------------------------------------------------------
# Initial setup
# Load libraries
library(shiny)
library(rstan)
# Stan settings
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# Load the functions
funcs <- new.env()
source('functions.R', local=funcs)
targets = list(
bound_L = 1,    # LOWER quantile boundary
bound_U = 10,   # UPPER quantile boundary
dens_L  = 0.01, # Target density below LOWER quantile boundary
dens_U  = 0.01) # Target density above UPPER quantile boundary
results = funcs$tuneParams(distribution='gamma', targets)
results$params
results$quantiles
results$histogram
# P[x > 10] ~ 0.01
targets = list(
bound_L = 1,    # LOWER quantile boundary
bound_U = 10,   # UPPER quantile boundary
dens_L  = 0.01, # Target density below LOWER quantile boundary
dens_U  = 0.01) # Target density above UPPER quantile boundary
results = funcs$tuneParams(distribution='inv_gamma', targets)
results$params
results$quantiles
results$histogram
